{"version":3,"file":"commonHelpers.js","sources":["../src/modules/converter.js","../src/js/1-timer.js"],"sourcesContent":["function convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nexport default convertMs;\n","import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport convertMs from '../modules/converter';\nimport { errorFlag, successFlag } from '../modules/iziToast';\n\nconst buttonTimer = document.querySelector('button[data-start]');\nconst dateInput = document.querySelector('#datetime-picker');\n\nlet userSelectDate;\nlet timerInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectDate = selectedDates[0];\n    const currentDate = new Date();\n    if (selectDate < currentDate) {\n      errorFlag();\n      buttonTimer.disabled = true;\n    } else {\n      userSelectDate = selectDate;\n      buttonTimer.disabled = false;\n    }\n  },\n};\n\nconst dateTimePicker = flatpickr('#datetime-picker', options);\n\nbuttonTimer.disabled = true;\nbuttonTimer.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  buttonTimer.disabled = true;\n  dateTimePicker.input.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const remainingTime = userSelectDate - new Date();\n    if (remainingTime <= 0) {\n      clearInterval(timerInterval);\n      updateTimer(0, 0, 0, 0);\n      successFlag();\n      dateInput.disabled = false;\n    } else {\n      const { days, hours, minutes, seconds } = convertMs(remainingTime);\n      updateTimer(days, hours, minutes, seconds);\n    }\n  }, 1000);\n}\n\nfunction updateTimer(days, hours, minutes, seconds) {\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent =\n    addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent =\n    addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n"],"names":["convertMs","ms","days","hours","minutes","seconds","buttonTimer","dateInput","userSelectDate","timerInterval","options","selectedDates","selectDate","errorFlag","dateTimePicker","flatpickr","startTimer","remainingTime","updateTimer","successFlag","addLeadingZero","value"],"mappings":"6IAAA,SAASA,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CCNA,MAAMC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,kBAAkB,EAE3D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAaD,EAAc,CAAC,EAE9BC,EADgB,IAAI,MAEtBC,IACAP,EAAY,SAAW,KAEvBE,EAAiBI,EACjBN,EAAY,SAAW,GAE1B,CACH,EAEMQ,EAAiBC,EAAU,mBAAoBL,CAAO,EAE5DJ,EAAY,SAAW,GACvBA,EAAY,iBAAiB,QAASU,CAAU,EAEhD,SAASA,GAAa,CACpBV,EAAY,SAAW,GACvBQ,EAAe,MAAM,SAAW,GAEhCL,EAAgB,YAAY,IAAM,CAChC,MAAMQ,EAAgBT,EAAiB,IAAI,KAC3C,GAAIS,GAAiB,EACnB,cAAcR,CAAa,EAC3BS,EAAY,EAAG,EAAG,EAAG,CAAC,EACtBC,IACAZ,EAAU,SAAW,OAChB,CACL,KAAM,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUiB,CAAa,EACjEC,EAAYhB,EAAMC,EAAOC,EAASC,CAAO,CAC1C,CACF,EAAE,GAAI,CACT,CAEA,SAASa,EAAYhB,EAAMC,EAAOC,EAASC,EAAS,CAClD,SAAS,cAAc,aAAa,EAAE,YAAce,EAAelB,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAckB,EAAejB,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YACvCiB,EAAehB,CAAO,EACxB,SAAS,cAAc,gBAAgB,EAAE,YACvCgB,EAAef,CAAO,CAC1B,CAEA,SAASe,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,CAAK,GAAKA,CACpC"}